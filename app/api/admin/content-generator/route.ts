import { NextResponse } from "next/server"
import { createClient } from "@/lib/supabase"
import type { ContentTemplate } from "@/data/content-templates"

export async function POST(request: Request) {
  try {
    // Verify authentication
    const supabase = createClient()
    const {
      data: { session },
    } = await supabase.auth.getSession()

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const body = await request.json()
    const { type, topic, length, tone, format, template, prompt } = body

    // Check if we have OpenAI API key
    const openaiApiKey = process.env.OPENAI_API_KEY
    if (!openaiApiKey) {
      return NextResponse.json(
        {
          error: "OpenAI API key not configured",
          content: "The OpenAI API key is not configured. Please add it to your environment variables.",
        },
        { status: 500 },
      )
    }

    // For template-based content generation
    if (type === "template-content" && template) {
      const content = await generateTemplateContent(template, prompt, tone)
      return NextResponse.json({ content })
    }

    // For idea generation
    if (format === "ideas") {
      const ideas = await generateIdeas(type, topic)
      return NextResponse.json({ ideas })
    }

    // For regular content generation
    const content = await generateContent(type, topic, length, tone)
    return NextResponse.json({ content })
  } catch (error) {
    console.error("Error generating content:", error)
    return NextResponse.json(
      { error: "Failed to generate content", content: "An error occurred while generating content." },
      { status: 500 },
    )
  }
}

async function generateContent(type: string, topic: string, length: number, tone: string) {
  try {
    // This is a placeholder for the actual OpenAI API call
    // In a real implementation, you would use the OpenAI API to generate content

    // For now, we'll simulate a response
    const contentTypes: Record<string, string> = {
      "blog-post": "Blog Post",
      "project-description": "Project Description",
      "case-study": "Case Study",
      "professional-bio": "Professional Bio",
      "skill-description": "Skill Description",
    }

    const contentType = contentTypes[type] || "Content"

    // Simulate API delay
    await new Promise((resolve) => setTimeout(resolve, 2000))

    return `# ${topic}

## Introduction

This is a sample ${contentType.toLowerCase()} about "${topic}" written in a ${tone} tone. The actual content would be generated by the OpenAI API in a real implementation.

## Main Content

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget aliquam ultricies, nunc nisl aliquet nunc, quis aliquam nisl nunc quis nisl. Nullam euismod, nisl eget aliquam ultricies, nunc nisl aliquet nunc, quis aliquam nisl nunc quis nisl.

## Conclusion

This is a conclusion for the ${contentType.toLowerCase()} about "${topic}". The actual content would be more detailed and relevant to the topic.`
  } catch (error) {
    console.error("Error in generateContent:", error)
    throw error
  }
}

async function generateIdeas(type: string, topic: string) {
  try {
    // This is a placeholder for the actual OpenAI API call
    // In a real implementation, you would use the OpenAI API to generate ideas

    // Simulate API delay
    await new Promise((resolve) => setTimeout(resolve, 1500))

    // Generate different ideas based on the type
    const ideas: Record<string, string[]> = {
      "blog-ideas": [
        `10 Essential ${topic} Tips for Beginners`,
        `How ${topic} Changed My Professional Life`,
        `The Future of ${topic}: Trends to Watch`,
        `Common ${topic} Mistakes and How to Avoid Them`,
        `${topic} vs Traditional Approaches: A Comparison`,
        `Getting Started with ${topic}: A Complete Guide`,
        `Advanced ${topic} Techniques for Experts`,
        `${topic} Case Study: Real-World Success Stories`,
      ],
      "project-ideas": [
        `${topic} Analytics Dashboard`,
        `Interactive ${topic} Learning Tool`,
        `${topic} Automation System`,
        `${topic} Mobile Application`,
        `${topic} API Integration Service`,
        `${topic} Visualization Platform`,
        `${topic} Community Forum`,
        `${topic} Recommendation Engine`,
      ],
      "case-study-ideas": [
        `How Company X Increased Revenue by 40% Using ${topic}`,
        `${topic} Implementation: Challenges and Solutions`,
        `Scaling ${topic} for Enterprise: A Case Study`,
        `${topic} ROI Analysis: Before and After`,
        `${topic} in Healthcare: Improving Patient Outcomes`,
        `${topic} in Finance: Reducing Operational Costs`,
        `${topic} in Education: Enhancing Learning Experiences`,
        `${topic} in Retail: Personalizing Customer Journeys`,
      ],
      "content-series": [
        `${topic} Fundamentals: A 5-Part Series`,
        `Mastering ${topic}: From Beginner to Expert`,
        `${topic} Deep Dives: Weekly Explorations`,
        `${topic} Interviews: Insights from Industry Leaders`,
        `${topic} Case Studies: Monthly Success Stories`,
        `${topic} Tutorials: Step-by-Step Guides`,
        `${topic} Debates: Exploring Different Perspectives`,
        `${topic} News Roundup: Weekly Updates`,
      ],
      "research-topics": [
        `The Impact of ${topic} on Industry Performance`,
        `${topic} Adoption Patterns Across Different Sectors`,
        `Ethical Considerations in ${topic} Implementation`,
        `${topic} and Sustainability: Finding the Balance`,
        `Comparative Analysis of ${topic} Methodologies`,
        `${topic} Integration with Existing Systems`,
        `The Role of ${topic} in Digital Transformation`,
        `${topic} Security and Privacy Concerns`,
      ],
    }

    return (
      ideas[type] || [`${topic} Idea 1`, `${topic} Idea 2`, `${topic} Idea 3`, `${topic} Idea 4`, `${topic} Idea 5`]
    )
  } catch (error) {
    console.error("Error in generateIdeas:", error)
    throw error
  }
}

async function generateTemplateContent(template: ContentTemplate, prompt: string, tone: string) {
  try {
    // This is a placeholder for the actual OpenAI API call
    // In a real implementation, you would use the OpenAI API to generate content based on the template

    // Simulate API delay
    await new Promise((resolve) => setTimeout(resolve, 2500))

    // For demonstration purposes, we'll return the template with some modifications
    // In a real implementation, you would use the OpenAI API to fill in the template

    // Replace placeholders in the template
    let content = template.template

    // Replace [Project Name], [Research Project Title], etc. with a title derived from the prompt
    const titleMatch = prompt.match(/about "(.*?)"/) || prompt.match(/for "(.*?)"/)
    const title = titleMatch ? titleMatch[1] : "Sample Title"

    content = content.replace(/\[.*?Name\]/g, title)
    content = content.replace(/\[.*?Title\]/g, title)

    // Add a note at the top
    content = `# ${title}\n\n_Generated based on the "${template.name}" template with a ${tone} tone._\n\n${content}`

    return content
  } catch (error) {
    console.error("Error in generateTemplateContent:", error)
    throw error
  }
}
